/*
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏!  
*/
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#include <Wire.h>

// –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –≤ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–µ (–Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–Ω–µ—Å–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
#define MGL_RGB1EN 1
//#define MGL_RGB3 1

/////////////////// –º–æ–¥—É–ª—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ ///////////////////
#ifdef MGL_RGB1EN
#include "TLC59108.h" // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è MGL_RGB1
#define HW_RESET_PIN 0 // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–Ω—ã–π —Å–±—Ä–æ—Å
#define I2C_ADDR TLC59108::I2C_ADDR::BASE
TLC59108 leds(I2C_ADDR + 7); // –ë–µ–∑ –ø–µ—Ä–µ–º—ã—á–µ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 3 –±–∏—Ç–∞ –∞–¥—Ä–µ—Å–∞
TLC59108 leds2(I2C_ADDR + 0); // –í—Å–µ –ø–µ—Ä–µ–º—ã—á–∫–∏ –Ω–∞ –º–æ–¥—É–ª–µ —Å—Ç–æ—è—Ç
TLC59108 leds3(I2C_ADDR + 6); // –°—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–µ—Ä–µ–º—ã—á–∫–∞
#endif
#ifdef MGL_RGB3
#include <PCA9634.h>
PCA9634 ledsModul(0x08); // (—Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: https://github.com/MAKblC/Codes/tree/master/I2C%20scanner)
PCA9634 ledsModul2(0x10);
PCA9634 ledsModul3(0x70);
#endif

#include <ESP32_Servo.h>                      // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ 
Servo myservo;
int pos = 1;            // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ // servo start position
int prevangle = 1;      // –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–≥–æ–ª —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ // previous angle of servo

#include "SparkFun_SGP30_Arduino_Library.h"  // –¥–∞—Ç—á–∏–∫ –≥–∞–∑–∞
SGP30 mySensor;

#include <VL53L0X.h>    /// –¥–∞—Ç—á–∏–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
VL53L0X lox;
#define HIGH_ACCURACY

#include <Adafruit_MCP4725.h>                           // –¥–∏–Ω–∞–º–∏–∫
Adafruit_MCP4725 buzzer;
int ton;
int vol1 = 1000; // –£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ = vol1-vol2
int vol2 = 900;  //

// –í—ã–±–µ—Ä–∏—Ç–µ –≥–∏—Ä–æ—Å–∫–æ–ø –∏–ª–∏ –¥–∞—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ –≤ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–µ (–Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–Ω–µ—Å–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
//#define MGS_A9 1
#define MGS_CLM60 1
//#define MGS_A6 1

/////////////////// –≥–∏—Ä–æ—Å–∫–æ–ø –∏ –¥–∞—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ ///////////////////
#ifdef MGS_A9
#include <Adafruit_LSM9DS1.h>
Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();
#endif
#ifdef MGS_A6
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
Adafruit_MPU6050 mpu;
#endif
#ifdef MGS_CLM60
#include "Adafruit_APDS9960.h"
Adafruit_APDS9960 apds9960;
#endif

// –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏
#define WIFI_SSID "XXXXXXXX"
#define WIFI_PASSWORD "XXXXXXXXX"
// —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
#define BOT_TOKEN "XXXXXXXX:XXXXXXXXXXXXXX"

#include "mcp3021.h"
uint8_t adcDeviceId =  0b00000001; // –ê–¥—Ä–µ—Å –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã A0 "0b00000000"
MCP3021 mcp3021;
const float air_value = 570.0; // –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const float water_value = 335.0;
const float moisture_0 = 0.0;
const float moisture_100 = 100.0;

#define  wind   17                     // –ø–∏–Ω –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (16)

#include <BH1750.h>        // –¥–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ // adding Light intensity sensor library  
BH1750 lightMeter;     // BH1750

// –¥–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –¥–∞–≤–ª–µ–Ω–∏—è // adding Temp Hum Bar sensor library
#include <Adafruit_BME280.h>  // BME280                         
Adafruit_BME280 bme280;       //

const unsigned long BOT_MTBS = 1000; // –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;

// —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
String test_photo_url = "https://mgbot.ru/upload/logo-r.png";

// –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é InlineKeyboard
String keyboardJson1 = "[[{ \"text\" : \"–í–∞—à —Å–∞–π—Ç\", \"url\" : \"https://mgbot.ru\" }],[{ \"text\" : \"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç IoTik.ru\", \"url\" : \"https://www.iotik.ru\" }]]";

void setup()
{
  myservo.attach(13);             // –ø–∏–Ω —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ // servo pin
  pinMode( wind, OUTPUT );       // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ –Ω–∞—Å–æ—Å–∞ –∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥ // pump and cooler pins configured on output mode
  digitalWrite(wind, LOW);

  Serial.begin(115200);
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Wire.begin();
#ifdef MGL_RGB1EN
  leds.init(HW_RESET_PIN);
  leds.setLedOutputMode(TLC59108::LED_MODE::PWM_IND);
  leds2.init(HW_RESET_PIN);
  leds2.setLedOutputMode(TLC59108::LED_MODE::PWM_IND);
  leds3.init(HW_RESET_PIN);
  leds3.setLedOutputMode(TLC59108::LED_MODE::PWM_IND);
#endif
#ifdef MGL_RGB3
  ledsModul.begin();
  ledsModul2.begin();
  ledsModul3.begin();
  for (int channel = 0; channel < ledsModul.channelCount(); channel++)
  {
    ledsModul.setLedDriverMode(channel, PCA9634_LEDOFF); // –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –≤ —Ä–µ–∂–∏–º–µ 0/1
    ledsModul2.setLedDriverMode(channel, PCA9634_LEDOFF);
    ledsModul3.setLedDriverMode(channel, PCA9634_LEDOFF);
  }
  for (int channel = 0; channel < ledsModul.channelCount(); channel++)
  {
    ledsModul.setLedDriverMode(channel, PCA9634_LEDPWM); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –®–ò–ú (0-255)
    ledsModul2.setLedDriverMode(channel, PCA9634_LEDPWM);
    ledsModul3.setLedDriverMode(channel, PCA9634_LEDPWM);
  }
#endif

#ifdef MGS_A9
  if (!lsm.begin())
  {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
  }
  Serial.println("Found LSM9DS1 9DOF");
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);
  lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);
#endif
#ifdef MGS_A6
  if (!mpu.begin(0x69)) { // (0x68) (—Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: https://github.com/MAKblC/Codes/tree/master/I2C%20scanner)
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
#endif
#ifdef MGS_CLM60
  if (!apds9960.begin()) {
    Serial.println("Failed to initialize device!");
  }
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞
  apds9960.enableColor(true);
  apds9960.enableProximity(true);
#endif

  buzzer.begin(0x61); // –° –ø–µ—Ä–µ–º—ã—á–∫–æ–π –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç 0x60
  buzzer.setVoltage(0, false);   // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞

  if (mySensor.begin() == false)
    Serial.println("No SGP30 Detected. Check connections.");
  mySensor.initAirQuality();
  
  lightMeter.begin();             // –∑–∞–ø—É—Å–∫ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ // turn the light intensity sensor on

  lox.init();
  lox.setTimeout(500);
#if defined LONG_RANGE
  // lower the return signal rate limit (default is 0.25 MCPS)
  lox.setSignalRateLimit(0.1);
  // increase laser pulse periods (defaults are 14 and 10 PCLKs)
  lox.setVcselPulsePeriod(VL53L0X::VcselPeriodPreRange, 18);
  lox.setVcselPulsePeriod(VL53L0X::VcselPeriodFinalRange, 14);
#endif
#if defined HIGH_SPEED
  // reduce timing budget to 20 ms (default is about 33 ms)
  lox.setMeasurementTimingBudget(20000);
#elif defined HIGH_ACCURACY
  // increase timing budget to 200 ms
  lox.setMeasurementTimingBudget(200000);
#endif

 bool bme_status = bme280.begin();
  if (!bme_status) {
    Serial.println("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0—Ö77, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π...");
    bme_status = bme280.begin(0x76);
    if (!bme_status)
      Serial.println("–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
  }

  mcp3021.begin(adcDeviceId);
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
void handleNewMessages(int numNewMessages)
{
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    text.toLowerCase();
    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";

    // –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—à–µ–¥—à–µ–π –∫–æ–º–∞–Ω–¥—ã
    if ((text == "/sensors") || (text == "sensors")) // –∏–∑–º–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    {
      float dist = lox.readRangeSingleMillimeters();
      float l = lightMeter.readLightLevel();
      float adc0 = mcp3021.readADC();
      float hum = map(adc0, air_value, water_value, moisture_0, moisture_100);
      float t = bme280.readTemperature();
      float h = bme280.readHumidity();
      float p = bme280.readPressure() / 100.0F;
      mySensor.measureAirQuality();

      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n-------------------------------------------\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      welcome += "‚òÅ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: " + String(p, 0) + " –≥–ü–∞\n";
      welcome += "‚òÄ –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: " + String(l) + " –õ–∫\n";
      welcome += "üö∞ –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: " + String(hum, 0) + " %\n";
      welcome += "‚ò¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –õ–û–°: " + String(mySensor.TVOC) + " ppb\n";
      welcome += "üå¨ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –°–û2: " + String(mySensor.CO2) + " ppm\n";
      welcome += "üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + String(dist, 0) + " –º–º\n";
#ifdef MGS_A9
      lsm.read(); // –¥–∞–Ω–Ω—ã–µ –≥–∏—Ä–æ—Å–∫–æ–ø–∞, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ –∏ –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä–∞
      sensors_event_t a, m, g, temp;
      lsm.getEvent(&a, &m, &g, &temp);
      welcome += "accel x = " + String(a.acceleration.x, 1) + "\n";
      welcome += "accel y = " + String(a.acceleration.y, 1) + "\n";
      welcome += "accel z = " + String(a.acceleration.z, 1) + "\n";
#endif
#ifdef MGS_A6
      sensors_event_t a, g, temp;
      mpu.getEvent(&a, &g, &temp);
      welcome += "accel x = " + String(a.acceleration.x) + "\n";
      welcome += "accel y = " + String(a.acceleration.y) + "\n";
      welcome += "accel z = " + String(a.acceleration.z) + "\n";
#endif
#ifdef MGS_CLM60
      uint16_t red_data   = 0;
      uint16_t green_data = 0;
      uint16_t blue_data  = 0;
      uint16_t clear_data = 0;
      uint16_t prox_data  = 0;
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
      while (!apds9960.colorDataReady()) {
        delay(5);
      }
      apds9960.getColorData(&red_data, &green_data, &blue_data, &clear_data);
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
      prox_data = apds9960.readProximity();
      welcome += "–¶–≤–µ—Ç: r:" + String(red_data) + " g:" + String(green_data) + " b:" + String(blue_data) + "\n";
#endif
      bot.sendMessage(chat_id, welcome, "Markdown");
    }

    if (text == "/photo") { // –ø–æ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      bot.sendPhoto(chat_id, test_photo_url, "–∞ –≤–æ—Ç –∏ —Ñ–æ—Ç–∫–∞!");
    }

    if ((text == "/windon") || (text == "windon"))
    {
      digitalWrite(wind, HIGH);
      bot.sendMessage(chat_id, "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/windoff") || (text == "windoff"))
    {
      digitalWrite(wind, LOW);
      bot.sendMessage(chat_id, "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω", "");
    }

    if ((text == "/light") || (text == "light"))
    {
#ifdef MGL_RGB1EN
      leds.setBrightness(0, 0xff);
      leds2.setBrightness(0, 0xff);
      leds3.setBrightness(0, 0xff);
#endif
#ifdef MGL_RGB3
      ledsModul.write1(0, 0xff);
      ledsModul2.write1(0, 0xff);
      ledsModul3.write1(0, 0xff);
#endif
      bot.sendMessage(chat_id, "–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/off") || (text == "off"))
    {
#ifdef MGL_RGB1EN
      leds.setBrightness(0, 0x00);
      leds2.setBrightness(0, 0x00);
      leds3.setBrightness(0, 0x00);
#endif
#ifdef MGL_RGB3
      ledsModul.write1(0, 0x00);
      ledsModul2.write1(0, 0x00);
      ledsModul3.write1(0, 0x00);
#endif
      bot.sendMessage(chat_id, "–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/color") || (text == "color"))
    {
#ifdef MGL_RGB1EN
      leds.setBrightness(3, random(0, 255));
      leds.setBrightness(2, random(0, 255));
      leds.setBrightness(5, random(0, 255));
      leds2.setBrightness(3, random(0, 255));
      leds2.setBrightness(2, random(0, 255));
      leds2.setBrightness(5, random(0, 255));
      leds3.setBrightness(3, random(0, 255));
      leds3.setBrightness(2, random(0, 255));
      leds3.setBrightness(5, random(0, 255));
#endif
#ifdef MGL_RGB3
      ledsModul.write1(3, random(0, 255));
      ledsModul2.write1(3, random(0, 255));
      ledsModul3.write1(3, random(0, 255));
      ledsModul.write1(2, random(0, 255));
      ledsModul2.write1(2, random(0, 255));
      ledsModul3.write1(2, random(0, 255));
      ledsModul.write1(5, random(0, 255));
      ledsModul2.write1(5, random(0, 255));
      ledsModul3.write1(5, random(0, 255));
#endif
      bot.sendMessage(chat_id, "–í–∫–ª—é—á–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞", "");
    }

    if (text == "/site") // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", "", keyboardJson1);
    }

    if (text == "/options") // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ø–ª–∏—Ü–µ–π
    {
      String keyboardJson = "[[\"/light\", \"/off\"],[\"/color\",\"/sensors\"],[\"/sound\",\"/windon\", \"/windoff\"],[\"/open\",\"/close\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "", keyboardJson, true);
    }

    if ((text == "/start") || (text == "start") || (text == "/help") || (text == "help")) // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
    {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –ö–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞", "");
      String sms = "–ö–æ–º–∞–Ω–¥—ã:\n";
      sms += "/options - –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n";
      sms += "/site - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\n";
      sms += "/photo - –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ\n";
      sms += "/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å\n";
      bot.sendMessage(chat_id, sms, "Markdown");
    }

    if (text == "/sound")
    {
      note(14, 400); note(2, 100);
      buzzer.setVoltage(0, false); // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
    }
    if (text == "/open")
    {
      myservo.write(100);
      bot.sendMessage(chat_id, "–¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞", "");
    }
    if (text == "/close")
    {
      myservo.write(0);
      bot.sendMessage(chat_id, "–¥–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞", "");
    }
  }
}

void loop() // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
{
  if (millis() - bot_lasttime > BOT_MTBS)
  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}
/////////////////////////////////////////////////////////////////////////// –≤—Å–µ –¥–ª—è –º—É–∑—ã–∫–∏
void note( int type, int duration) {   // –Ω–æ—Ç–∞ (–∫–∞–∫–∞—è –Ω–æ—Ç–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
  switch (type) {
    case 1:   ton = 1000; break;
    case 2:   ton = 860;  break;
    case 3:   ton = 800;  break;
    case 4:   ton = 700;  break;
    case 5:   ton = 600;  break;
    case 6:   ton = 525;  break;
    case 7:   ton = 450;  break;
    case 8:   ton = 380;  break;
    case 9:   ton = 315;  break;
    case 10:  ton = 250;  break;
    case 11:  ton = 190;  break;
    case 12:  ton = 130;  break;
    case 13:  ton = 80;   break;
    case 14:  ton = 30;   break;
    case 15:  ton = 1;   break;
  }
  delay(10);
  for (int i = 0; i < duration; i++) {
    buzzer.setVoltage(vol1, false);
    buzzer.setVoltage(vol2, false);
    delayMicroseconds(ton);
  }
}
